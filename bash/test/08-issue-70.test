cat > entangled.dhall <<EOF
let entangled = https://raw.githubusercontent.com/entangled/entangled/v1.2.2/data/config-schema.dhall
                sha256:9bb4c5649869175ad0b662d292fd81a3d5d9ccb503b1c7e316d531b7856fb096

let syntax : entangled.Syntax =
   { matchCodeStart       = "\`\`\`.*[ ]*(id|file)=\".*\""
   , matchCodeEnd         = "\`\`\`"
   , extractLanguage      = "\`\`\`([a-zA-Z0-9]+).*"
   -- , extractLanguage      = "\`\`\`([a-zA-Z0-9]+)[ ]*(?:id|file)=\"[^\"]*\""
   , extractReferenceName = "\`\`\`.*[ ]*id=\"([^\"]*)\""
   , extractFileName      = "\`\`\`.*[ ]*file=\"([^\"]*)\"" }

in { entangled = entangled.Config :: { database  = Some "entangled.db"
                                     , annotate  = entangled.Annotate.Standard
                                     , syntax    = syntax } }
EOF

entangled insert -s issue-70.md
assert-return-success "Could insert issue-70.md" $?
entangled tangle -a
assert-exists "main.c is created" main.c
cat main.c
# vim:ft=bash
